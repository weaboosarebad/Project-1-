





namespace Task1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
    }

    //Question 2.1
    abstract class Tile
    {
        protected int x;
        protected int y;

        //Public Accessors
        public int xPos
        {
            get { return x; } 
            set { }

        }
        public int yPos
        {
            get { return y; }
            set { }
        }
        public enum TileType
        {
            Hero,
            Enemy,
            Gold,
            Weapon
        }

        //Constructor 
        public Tile()
        {

        }

        public Tile(int xCoordinate, int yCoordinate)
        {
            y = yCoordinate;
            x = xCoordinate;
        }
        //Obstacle Subclass 
        public class Obstacle : Tile
        {
            public Obstacle(int _xPos, int _yPos)
            {
                x = _xPos;
                y = _yPos;
            }
        }

        //Empty Tile Subclass
        public class EmptyTile : Tile
        {
            public EmptyTile(int _xPos, int _yPos)
            {
                x = _xPos;
                y = _yPos;
            }
        }

    }

    //Question 2.2 
    abstract class Character : Tile 
    {
        // Enum For Movement
        public enum Movement { noMovement, Up, Down, Left, Right }
        //Vision Array
        public char[] vision; 
        //Protected Variables
        protected int HP;
        protected int maxHp;
        protected int damage;

        //Public Accessors
        public int healthPoints
        {
            get { return HP; }
            set { }

        }
        public int maximumHealth
        {
            get { return maxHp; }
            set { }

        }
        public int dmg
        {
            get { return damage; }
            set { }

        }

        public Character()
        {

        }

        //Question 2.3 

        //Constructor
        public Character(int _xpos, int _ypos, string symbol)  
        {
            xPos = _xpos;
            yPos = _ypos; 

        
        } 

        //Attack 
        public virtual void Attack(Character target)
        {
            
        } 
        //Checking if character is dead 
        public bool IsDead()
        {
            if (healthPoints == 0)
            {
                return true; 
            }
            else return false;
        }
       // Check Range
          public virtual bool CheckRange()
        {
            if (DistanceTo() >= 1)
            {
                return true;

            }
            else return false;
        }


        // Check Distance
        private int DistanceTo()
        {
            int characterYPos =0;
            int characterXPos=0;
            int targetYPos=0;
            int targetXPos=0;
            int distanceY;
            int distanceX; 
            Map obj = new Map();
            for (int k = 0; k < Map.gameMap.Length; k++)
            {
                for (int j = 0; j < Map.gameMap.Length; j++)
                {
                    if (Map.gameMap[k, j] == 'H')
                    {
                        characterYPos = k;
                        characterXPos = j;
                    }
                    if (Map.gameMap[k, j] == 'G')
                    {
                        targetYPos = k;
                        targetXPos = j;
                    }
                }
            }
            if (characterYPos > targetYPos)
            {
                distanceY = characterYPos - targetYPos;
            }
            else distanceY = targetYPos - characterYPos;

            if (characterXPos > targetXPos)
            {
                distanceX = characterXPos - targetXPos;
            }
            else distanceX = targetXPos - characterXPos;

            return (distanceX + distanceY); 

        }

         

    }  
     
    
   public class Map 
    {
        // 2D array declaration 
        public static char[,] gameMap;
    }
}
